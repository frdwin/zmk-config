/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include "accents.dtsi"

/*
 * CAPSWORD CONFIGURATION
 */

&caps_word {
  continue-list = <UNDERSCORE MINUS DELETE BACKSPACE>;
};

/*
 * LAYERS DEFINITION
 */

#define DFT 0
#define NUM 1
#define SYM 2
#define ACC 3

/*
 * KEYS DEFINITION FOR HOME ROW MODS
 */

#define K_LEFT  0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29
#define K_RIGHT 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35
#define K_THUMB 36 37 38 39 40 41

/*
 * START OF KEYMAP CONFIGURATION
 */

/ {

  /*
   * COMBOS
   */

  combos {
    compatible = "zmk,combos";
	combo_semicol {
      timeout-ms = <60>;
	  layers = <0>;
	  key-positions = <32 33>;
	  bindings = <&kp FSLH>;
	};

    combo_caps {
      timeout-ms = <60>;
      key-positions = <38 39>;
      bindings = <&kp CAPS>;
    };

    combo_cedilla {
      timeout-ms = <60>;
      key-positions = <26 27>;
      bindings = <&kp SEMI>;
    };
  };

  /*
   * MACROS
   */
  
  macros {
    m_term: m_term {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings
        = <&macro_press &kp LGUI>
        , <&macro_tap &kp RET>
        , <&macro_release &kp LGUI>
        ;
    };
  };

/*
 * HOME ROW MODS OPTIMIZATIONS
 */

behavior {
  hrm_l: hrm_left {
    compatible = "zmk,behavior-hold-tap";
    #binding-cells = <2>;
    flavor = "balanced";
	tapping-term-ms = <250>;
	quick-tap-ms = <175>;
	require-prior-idle-ms = <150>;
	bindings = <&kp>, <&kp>;
	hold-trigger-key-positions = <K_RIGHT K_THUMB>;
	hold-trigger-on-release;
  };

  hrm_r: hrm_right {
    compatible = "zmk,behavior-hold-tap";
    #binding-cells = <2>;
    flavor = "balanced";
	tapping-term-ms = <250>;
	quick-tap-ms = <175>;
	require-prior-idle-ms = <150>;
	bindings = <&kp>, <&kp>;
	hold-trigger-key-positions = <K_LEFT K_THUMB>;
	hold-trigger-on-release;
  };

  bspc_l: backspace {
    compatible = "zmk,behavior-hold-tap";
    #binding-cells = <2>;
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <200>;
	bindings = <&mo>, <&kp>;
  };

  se_ss: se_ss {
    compatible = "zmk,behavior-hold-tap";
    #binding-cells = <2>;
    flavor = "tap-preferred";
    require-prior-idle-ms = <175>;
    tapping-term-ms = <230>;
    quick-tap-ms = <200>;
    bindings = <&kp>, <&kp>;
  };
};

  /*
   * KEYMAP
   */

  keymap {
    compatible = "zmk,keymap";
    default_layer {
      // -------------------------------------------------------------------------------------------------------------------------------
      // | CLEAR | Q      | W      | E       | R          | T          |   | Y            | U        | I       | O      | P      | TERM |
      // | ESC   | LGUI A | LALT S | LCTRL D | LSHIFT F   | G          |   | H            | RSHIFT J | RCTRL K | RALT L | RGUI ~ | '    |
      // | CPSW  | Z      | X      | C       | V          | B          |   | N            | M        | ,       | .      | /      | NONE |
      //                           | TAB     | NUM        | LSHIFT ENT |   | RSHIFT SPACE | SYM BSPC | DEL     |
      bindings = <
        &kp CLEAR  &kp Q         &kp W         &kp E          &kp R           &kp T            &kp Y            &kp U           &kp I          &kp O         &kp P             &m_term
        &kp ESC    &hrm_l LGUI A &hrm_l LALT S &hrm_l LCTRL D &hrm_l LSHIFT F &kp G            &kp H            &hrm_r RSHIFT J &hrm_r RCTRL K &hrm_r RALT L &hrm_r RGUI SQT &sl ACC 
        &caps_word &kp Z         &kp X         &kp C          &kp V           &kp B            &kp N            &kp M           &kp COMMA      &kp DOT      &kp INT1          &kp GRAVE
                                               &none       &lt NUM TAB         &se_ss LSHIFT RET   &se_ss RSHIFT SPACE &bspc_l SYM BSPC    &kp DEL
      >;
    };

  numbers_layer {
	// -----------------------------------------------------------------------------------------
	// |  TAB | 1    | 2    | 3    | 4    | 5    |   | 6   | 7   | 8   | 9   | 0   | BSPC |
	// |      | HOME | END  | PGUP | PGDN |      |   | LFT | DWN | UP  | RGT |     |      |
	// | NONE | !    | @    | #    | $    | %    |   | ^   | &   | *   | (   | )   |      |
	//                      | GUI  |      | ENT  |   | SPC |     | ALT |
      bindings = <
  	  &kp TAB &kp N1    &kp N2    &kp N3    &kp N4   &kp N5      &kp N6    &kp N7   &kp N8    &kp N9    &kp N0   &kp BSPC
  	  &trans  &kp PG_UP &kp PG_DN &kp HOME  &kp END  &trans     &kp LEFT  &kp DOWN &kp UP    &kp RIGHT &trans   &trans
  	  &none   &kp EXCL  &kp AT    &kp HASH  &kp DLLR &kp PRCNT   &kp LS(SQT) &kp AMPS &kp ASTRK &kp LPAR  &kp RPAR &trans
  	                           &kp LGUI  &trans    &trans     &trans    &trans   &kp RALT
      >;
    };

    symbols_layer {
      // -----------------------------------------------------------------------------------------
      // | NONE | BT0   | BT1  | BT2   | BT3   | BTCLR |   |  +  |  :  |  =  |     |       |     |
      // | TAB  | GUI   | ALT  | CTRL  | SHIFT | DEL   |   |  -  |  {  |  [  |  (  |  "|"  |     |
      // | NONE |       | MUTE | VOLDN | VOLUP |       |   |  _  |  }  |  ]  |  )  | \     |     |
      //                | GUI  |       | ENT   |           | SPC |     | ALT |
      bindings = <
        &none  &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_CLR   &kp PLUS &kp QMARK &kp EQUAL &kp GRAVE &kp LS(GRAVE) &trans
        &kp TAB &sk LGUI &sk LALT &sk LCTRL &sk LSHIFT             &kp DEL      &kp MINUS &kp LS(RBKT)  &kp RBKT &kp LPAR &kp LS(NUBS) &trans
        &none &trans   &kp K_VOL_UP &kp K_VOL_DN &kp K_MUTE                      &trans       &kp UNDER &kp LS(BSLH)  &kp BSLH &kp RPAR &kp NUBS     &trans
                                 &kp LGUI &trans                   &trans          &trans   &trans    &kp RALT
      >;
    };

    acc_layer {
      bindings = <
      &trans &trans &trans &eacu  &trans &trans   &trans &uacu  &iacu  &oacu  &trans &trans 
      &trans &aacu  &trans &trans &trans &trans   &trans &trans &trans &trans &trans &trans 
      &trans &trans &trans &trans &trans &trans   &trans &trans &trans &trans &trans &trans 
                           &trans &trans &trans   &trans &trans &trans
      >;
    };
  };
};
