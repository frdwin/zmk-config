/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/*
 * CAPSWORD CONFIGURATION
 */

&caps_word {
  continue-list = <UNDERSCORE MINUS DELETE BACKSPACE>;
};

/*
 * LAYERS DEFINITION
 */

#define DFT 0
#define NUM 1
#define SYM 2

/*
 * KEYS DEFINITION FOR HOME ROW MODS
 */

#define K_LEFT  0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29
#define K_RIGHT 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35
#define K_THUMB 36 37 38 39 40 41

/*
 * START OF KEYMAP CONFIGURATION
 */

/ {

  /*
   * MACROS
   */
  
  macros {

    m_ced: m_ced {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&kp SQT &kp C>;
    };

    m_dqt_spc: m_dqt_spc {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&kp DQT &kp SPC>;
    };
  };

  /*
   * COMBOS
   */

  combos {
    compatible = "zmk,combos";

	combo_semicol {
      timeout-ms = <60>;
	  layers = <0>;
	  key-positions = <32 33>;
	  bindings = <&kp SEMI>;
	};

    combo_caps {
      timeout-ms = <60>;
      key-positions = <38 39>;
      bindings = <&kp CAPS>;
    };

    combo_cedilla {
      timeout-ms = <60>;
      layers = <0>;
      key-positions = <26 27>;
      bindings = <&m_ced>;
    };

    combo_dqt {
      timeout-ms = <60>;
      key-positions = <7 8>;
      bindings = <&m_dqt_spc>;
    };
  };

/*
 * CUSTOM BEHAVIORS
 */

behavior {

  /*
   * HOME ROW MODS OPTIMIZATIONS
   */
  
  hrm_l: hrm_l {
    compatible = "zmk,behavior-hold-tap";
    #binding-cells = <2>;
    flavor = "balanced";
	tapping-term-ms = <250>;
	quick-tap-ms = <175>;
	require-prior-idle-ms = <150>;
	bindings = <&kp>, <&kp>;
	hold-trigger-key-positions = <K_RIGHT K_THUMB>;
	hold-trigger-on-release;
  };

  hrm_r: hrm_r {
    compatible = "zmk,behavior-hold-tap";
    #binding-cells = <2>;
    flavor = "balanced";
	tapping-term-ms = <250>;
	quick-tap-ms = <175>;
	require-prior-idle-ms = <150>;
	bindings = <&kp>, <&kp>;
	hold-trigger-key-positions = <K_LEFT K_THUMB>;
	hold-trigger-on-release;
  };

  ht_shift: ht_shift {
    compatible = "zmk,behavior-hold-tap";
    #binding-cells = <2>;
    flavor = "tap-preferred";
    require-prior-idle-ms = <150>;
    tapping-term-ms = <200>;
    quick-tap-ms = <200>;
    bindings = <&kp>, <&kp>;
  };

  /*
   * PERMIT REPETITION OF TAPPING
   */

  ht_bspc: ht_bspc {
    compatible = "zmk,behavior-hold-tap";
    #binding-cells = <2>;
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <200>;
	bindings = <&mo>, <&kp>;
  };

  /*
   * ACCENTS
   */

  acute_grave: acute_grave {
    compatible = "zmk,behavior-mod-morph";
    #binding-cells = <0>;
    bindings = <&kp SQT>, <&kp GRAVE>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
  };

  tilde_caret: tilde_caret {
    compatible = "zmk,behavior-mod-morph";
    #binding-cells = <0>;
    bindings = <&kp TILDE>, <&kp CARET>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
  };

  hrm_tilde_caret: hrm_tilde_caret {
    compatible = "zmk,behavior-hold-tap";
    #binding-cells = <2>;
    flavor = "balanced";
	tapping-term-ms = <250>;
	quick-tap-ms = <175>;
	require-prior-idle-ms = <150>;
	bindings = <&kp>, <&tilde_caret>;
	hold-trigger-key-positions = <K_LEFT K_THUMB>;
	hold-trigger-on-release;
  };
};

  /*
   * KEYMAP
   */

  keymap {
    compatible = "zmk,keymap";

    default_layer {
      bindings = <
        &kp CLEAR  &kp Q         &kp W         &kp E          &kp R           &kp T                 &kp Y                 &kp U            &kp I          &kp O         &kp P                   &kp BSPC
        &kp ESC    &hrm_l LGUI A &hrm_l LALT S &hrm_l LCTRL D &hrm_l LSHIFT F &kp G                 &kp H                 &hrm_r RSHIFT J  &hrm_r RCTRL K &hrm_r RALT L &hrm_tilde_caret RGUI 0 &acute_grave 
        &caps_word &kp Z         &kp X         &kp C          &kp V           &kp B                 &kp N                 &kp M            &kp COMMA      &kp DOT       &kp FSLH                &none
                                               &none          &lt NUM TAB     &ht_shift LSHIFT RET   &ht_shift RSHIFT SPACE &ht_bspc SYM BSPC &kp DEL
      >;
    };

  numbers_layer {
      bindings = <
  	    &kp TAB    &kp N1        &kp N2        &kp N3         &kp N4          &kp N5                &kp N6                &kp N7           &kp N8         &kp N9        &kp N0            &kp BSPC
  	    &trans     &kp PG_UP     &kp PG_DN     &kp HOME       &kp END         &trans                &kp LEFT              &kp DOWN         &kp UP         &kp RIGHT     &trans            &trans
  	    &none      &kp EXCL      &kp AT        &kp HASH       &kp DLLR        &kp PRCNT             &kp CARET             &kp AMPS         &kp ASTRK      &kp LPAR      &kp RPAR          &trans
  	                                           &kp LGUI       &trans          &trans                &trans                &trans           &kp RALT
      >;
    };

    symbols_layer {
      bindings = <
        &none  &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_CLR   &kp PLUS &kp COLON &kp EQUAL &kp SQT &kp DQT   &trans
        &kp TAB &sk LGUI &sk LALT &sk LCTRL &sk LSHIFT             &trans       &kp MINUS &kp LBRC  &kp LBKT &kp LPAR &kp PIPE &trans
        &none &kp C_MUTE   &kp C_VOL_DN &kp C_VOL_UP &trans        &trans       &kp UNDER &kp RBRC  &kp RBKT &kp RPAR &kp BSLH &trans
                                 &kp LGUI &trans                   &trans          &trans   &trans    &kp RALT
      >;
    };
  };
};
